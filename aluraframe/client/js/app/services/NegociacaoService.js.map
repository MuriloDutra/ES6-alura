{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","get","then","negociacoes","reduce","novoArray","periodo","concat","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":";;;;;;IAAMA,iB;AAEF,iCAAa;AAAA;;AACT,aAAKC,KAAL,GAAa,IAAIC,WAAJ,EAAb;AACH;;;;2CAEiB;AACd,mBAAOC,QAAQC,GAAR,CAAY,CACX,KAAKH,KAAL,CAAWI,GAAX,CAAe,oBAAf,CADW,EAEX,KAAKJ,KAAL,CAAWI,GAAX,CAAe,sBAAf,CAFW,EAGX,KAAKJ,KAAL,CAAWI,GAAX,CAAe,uBAAf,CAHW,CAAZ,EAKFC,IALE,CAKG;AAAA,uBACFC,YAAYC,MAAZ,CAAmB,UAACC,SAAD,EAAYC,OAAZ;AAAA,2BAAwBD,UAAUE,MAAV,CAAiBD,OAAjB,CAAxB;AAAA,iBAAnB,EAAsE,EAAtE,EACCE,GADD,CACK;AAAA,2BAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,iBADL,CADE;AAAA,aALH,EASFC,KATE,CASI,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,aAZE,CAAP;AAaH;;;iCAEQC,U,EAAW;AAChB,mBAAOC,kBAAkBC,aAAlB,GACEpB,IADF,CACO;AAAA,uBAAc,IAAIqB,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aADP,EAEEtB,IAFF,CAEO;AAAA,uBAAOuB,IAAIC,QAAJ,CAAaN,UAAb,CAAP;AAAA,aAFP,EAGElB,IAHF,CAGO;AAAA,uBAAM,oCAAN;AAAA,aAHP,EAIEa,KAJF,CAIQ,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAUD,IAAV,CAAN;AACH,aAPF,CAAP;AAQH;;;gCAEM;AACH,mBAAOG,kBAAkBC,aAAlB,GACEpB,IADF,CACO;AAAA,uBAAc,IAAIqB,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aADP,EAEEtB,IAFF,CAEO;AAAA,uBAAOuB,IAAIE,UAAJ,EAAP;AAAA,aAFP,EAGEZ,KAHF,CAGQ,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAUD,IAAV,CAAN;AACH,aANF,CAAP;AAOH;;;gCAEM;AACH,mBAAOG,kBACFC,aADE,GAEFpB,IAFE,CAEG;AAAA,uBAAc,IAAIqB,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,aAFH,EAGFtB,IAHE,CAGG;AAAA,uBAAOuB,IAAIG,UAAJ,EAAP;AAAA,aAHH,EAIF1B,IAJE,CAIG;AAAA,uBAAM,iCAAN;AAAA,aAJH,EAKFa,KALE,CAKI,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAUD,IAAV,CAAN;AACH,aARE,CAAP;AASH;;;gCAEOW,U,EAAW;AACf,mBAAQ,KAAKC,gBAAL,GACC5B,IADD,CACM;AAAA,uBACFC,YAAY4B,MAAZ,CAAmB;AAAA,2BAA6D;AAC5E,yBAAEF,WAA0E;AAA1E,yBACDG,IADC,CACI;AAAA,mCAAsE;AACpEZ,2CAAWa,QAAX,CAAoBC,mBAApB;AADF;AAAA,yBADJ;AADa;AAAA,iBAAnB,CADE;AAAA,aADN,EAK2D;AAL3D,aAMCnB,KAND,CAMO,gBAAQ;AACXC,wBAAQC,GAAR,CAAYC,IAAZ;AACA,sBAAM,IAAIC,KAAJ,CAAUD,IAAV,CAAN;AACH,aATD,CAAR;AAUH","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService{\r\n\r\n    constructor(){\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoes(){\r\n        return Promise.all([\r\n                this._http.get('negociacoes/semana'), \r\n                this._http.get('negociacoes/anterior'), \r\n                this._http.get('negociacoes/retrasada')\r\n            ])\r\n            .then(negociacoes => \r\n                negociacoes.reduce((novoArray, periodo) => novoArray.concat(periodo), [])\r\n                .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Um erro ocorreu ao importar as Negociações.');\r\n            });\r\n    }\r\n\r\n    cadastra(negociacao){\r\n        return ConnectionFactory.getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.adiciona(negociacao))\r\n                .then(() => 'Negociação adicionada com sucesso.')\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error(erro);\r\n                });\r\n    }\r\n\r\n    lista(){\r\n        return ConnectionFactory.getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.listaTodos())\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error(erro);\r\n                });\r\n    }\r\n\r\n    apaga(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagas com sucesso!')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error(erro);\r\n            });\r\n    }\r\n\r\n    importa(listaAtual){\r\n        return  this.obterNegociacoes()\r\n                .then(negociacoes => \r\n                    negociacoes.filter(negociacao =>                                                //acessando uma Negociação das que foram IMPORTADAS\r\n                        ! listaAtual                                                                //acesso listaAtual, o retorno precisa ser 'false' para que as Negociações que foram iguais, não serem incluídas no novo vetor feito por 'filter()'\r\n                        .some(negociacaoExistente =>                                                //acessa uma Negociação de listaAtual\r\n                                negociacao.isEquals(negociacaoExistente))))//compara Negociação que foi IMPORTADA COM a Negociação de listaAtual\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error(erro);\r\n                });\r\n    }\r\n} "]}
{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","all","get","then","negociacoes","reduce","novoArray","periodo","concat","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService';\nimport { ConnectionFactory } from './ConnectionFactory';\nimport { NegociacaoDao } from '../dao/NegociacaoDao';\nimport { Negociacao } from '../models/Negociacao';\n\nexport class NegociacaoService{\n\n    constructor(){\n        this._http = new HttpService();\n    }\n\n    obterNegociacoes(){\n        return Promise.all([\n                this._http.get('negociacoes/semana'), \n                this._http.get('negociacoes/anterior'), \n                this._http.get('negociacoes/retrasada')\n            ])\n            .then(negociacoes => \n                negociacoes.reduce((novoArray, periodo) => novoArray.concat(periodo), [])\n                .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Um erro ocorreu ao importar as Negociações.');\n            });\n    }\n\n    cadastra(negociacao){\n        return ConnectionFactory.getConnection()\n                .then(connection => new NegociacaoDao(connection))\n                .then(dao => dao.adiciona(negociacao))\n                .then(() => 'Negociação adicionada com sucesso.')\n                .catch(erro => {\n                    console.log(erro);\n                    throw new Error(erro);\n                });\n    }\n\n    lista(){\n        return ConnectionFactory.getConnection()\n                .then(connection => new NegociacaoDao(connection))\n                .then(dao => dao.listaTodos())\n                .catch(erro => {\n                    console.log(erro);\n                    throw new Error(erro);\n                });\n    }\n\n    apaga(){\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagas com sucesso!')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(erro);\n            });\n    }\n\n    importa(listaAtual){\n        return  this.obterNegociacoes()\n                .then(negociacoes => \n                    negociacoes.filter(negociacao =>                                                //acessando uma Negociação das que foram IMPORTADAS\n                        ! listaAtual                                                                //acesso listaAtual, o retorno precisa ser 'false' para que as Negociações que foram iguais, não serem incluídas no novo vetor feito por 'filter()'\n                        .some(negociacaoExistente =>                                                //acessa uma Negociação de listaAtual\n                                negociacao.isEquals(negociacaoExistente))))//compara Negociação que foi IMPORTADA COM a Negociação de listaAtual\n                .catch(erro => {\n                    console.log(erro);\n                    throw new Error(erro);\n                });\n    }\n} "]}
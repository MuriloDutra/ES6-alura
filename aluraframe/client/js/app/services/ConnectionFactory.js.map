{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","event","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AACA;;AAEA,IAAIA,oBACA,YAAW;;AAEP,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAGA;AAEI,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAO0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB,CAFoC,CAEsB;;AAE1DQ,gCAAYI,eAAZ,GAA8B,iBAAS;AACnCd,0CAAkBe,aAAlB,CAAgCC,MAAMC,MAAN,CAAaC,MAA7C,EADmC,CACmB;AACzD,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,iBAAS;AAC7B,4BAAG,CAACf,UAAJ,EAAe;AAAE;AACbA,yCAAaY,MAAMC,MAAN,CAAaC,MAA1B;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR,CAFW,CAEgC;AAC3CA,uCAAWC,KAAX,GAAmB,YAAU;AAAE;AAC3B,sCAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH,6BAFD;AAGH;;AAEDE,gCAAQJ,UAAR,EAT6B,CASR;AACxB,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,iBAAS;AAC3BC,gCAAQC,GAAR,CAAYP,MAAMC,MAAN,CAAaO,KAAzB;AACAf,+BAAOO,MAAMC,MAAN,CAAaO,KAAb,CAAmBC,IAA1B,EAF2B,CAEM;AACpC,qBAHD;AAIH,iBAxBM,CAAP;AAyBH;AAjCL;AAAA;AAAA,0CAoCyBrB,UApCzB,EAoCoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAS;;AAEpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAmD;AAC/CzB,mCAAW0B,iBAAX,CAA6BD,KAA7B,EAHgB,CAGuB;;AAE3CzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC,EALoB,CAKwC;AAC/D,iBAND;AAOH;AA5CL;AAAA;AAAA,8CA+C4B;AACpB,oBAAG5B,UAAH,EAAc;AACVC;AACA;AACAD,iCAAa,IAAb;AACH;AACJ;AArDL;;AAAA;AAAA;AAuDP,CAlEuB,EAAxB,C,CAkEQ","file":"ConnectionFactory.js","sourcesContent":["\r\n//Criando uma função anônima. Isso foi feito para envolver a classe ConnectionFactory envolto de um módulo\r\n\r\nvar ConnectionFactory = (\r\n    function (){\r\n\r\n        const stores = ['negociacoes'];\r\n        const version = 4;\r\n        const dbName = 'aluraframe';\r\n        \r\n        var connection = null;\r\n        var close = null;\r\n\r\n\r\n        return class ConnectionFactory{\r\n\r\n            constructor(){\r\n                throw new Error('Não é possível criar instâncias de ConnectionFactory.');\r\n            }\r\n\r\n\r\n            static getConnection(){\r\n                return new Promise((resolve, reject) => {\r\n\r\n                    let openRequest = window.indexedDB.open(dbName, version); //Requisitando abertura de conexão\r\n\r\n                    openRequest.onupgradeneeded = event => {\r\n                        ConnectionFactory._createStores(event.target.result); //Cria as Stores\r\n                    };\r\n\r\n                    openRequest.onsuccess = event => {\r\n                        if(!connection){ //Verificando se a conexão existe\r\n                            connection = event.target.result;\r\n                            close = connection.close.bind(connection); //Obtendo o método original com seu THIS original\r\n                            connection.close = function(){ //sobrescrevendo o método close()\r\n                                throw new Error('Não é permitido fechar diretamente a conexão.');\r\n                            }\r\n                        }\r\n                        \r\n                        resolve(connection); //Caso tudo dê certo\r\n                    };\r\n\r\n                    openRequest.onerror = event => {\r\n                        console.log(event.target.error);\r\n                        reject(event.target.error.name); //Caso um erro aconteça\r\n                    };\r\n                });\r\n            }\r\n\r\n\r\n            static _createStores(connection){\r\n                stores.forEach(store => {\r\n\r\n                    if(connection.objectStoreNames.contains(store))    //Verificando se a ObjectStore já existe\r\n                        connection.deleteObjectStore(store);   //Deletando a ObjectStore já existente. Para atualizar uma ObjectStore, é necessário deletá-la e criá-la novamente\r\n\r\n                    connection.createObjectStore(store, {autoIncrement: true}); //Criando a ObjectStore    \r\n                });\r\n            }\r\n\r\n\r\n            static closeConnection(){\r\n                if(connection){\r\n                    close();\r\n                    //Reflect.apply(close, connection, []); Outra maneira de preservar o THIS de 'close'\r\n                    connection = null;\r\n                }\r\n            }\r\n        }\r\n}) ();  //Invocano a função anônima"]}
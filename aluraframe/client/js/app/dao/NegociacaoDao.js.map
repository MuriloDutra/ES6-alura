{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","event","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;;;;;;;;;;AAASA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEIC,a;AAET,uCAAYC,UAAZ,EAAuB;AAAA;;AACnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAW;AAAA;;AAChB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,MAAKN,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,MAAKN,MAAN,CAA7B,EAA4C,WAA5C,EAA0D;AAA1D,6BACOO,WADP,CACmB,MAAKP,MADxB,EAC0D;AAD1D,6BAEOQ,GAFP,CAEWP,UAFX,CAAd,CADoC,CAGoC;;AAExEI,oCAAQI,SAAR,GAAoB,iBAAS;AACzBN;AACH,6BAFD;;AAIAE,oCAAQK,OAAR,GAAkB,iBAAS;AACvBC,wCAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAzB;AACAX,uCAAO,0CAAP;AACH,6BAHD;AAIH,yBAbM,CAAP;AAcH;;;iDAEW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIY,SAAS,OAAKjB,WAAL,CACIO,WADJ,CACgB,CAAC,OAAKN,MAAN,CADhB,EAC+B,WAD/B,EAC+C;AAD/C,6BAEIO,WAFJ,CAEgB,OAAKP,MAFrB,EAE+C;AAF/C,6BAGIiB,UAHJ,EAAb,CADoC,CAIwB;;AAE5D,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,iBAAS;AACxB,oCAAIU,QAAQN,MAAMC,MAAN,CAAaM,MAAzB;;AAEA,oCAAGD,KAAH,EAAS;AACL,wCAAIE,OAAOF,MAAMG,KAAjB;AACAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;AACAP,0CAAMQ,QAAN;AACH,iCAJD,MAKIxB,QAAQe,WAAR;AACP,6BATD;;AAWAF,mCAAON,OAAP,GAAiB,iBAAS;AACtBC,wCAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAb,CAAmBa,IAA/B;AACAxB,uCAAO,yCAAP;AACH,6BAHD;AAIH,yBAvBM,CAAP;AAwBH;;;iDAEW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,OAAKN,WAAL,CACGO,WADH,CACe,CAAC,OAAKN,MAAN,CADf,EAC8B,WAD9B,EAC8C;AAD9C,6BAEGO,WAFH,CAEe,OAAKP,MAFpB,EAE8C;AAF9C,6BAGG6B,KAHH,EAAd,CAFoC,CAKwB;;AAE5DxB,oCAAQI,SAAR,GAAoB;AAAA,uCAASN,QAAQ,oCAAR,CAAT;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB,iBAAS;AACvBC,wCAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAzB;AACAX,uCAAO,yCAAP;AACH,6BAHD;AAIH,yBAbM,CAAP;AAcH","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from '../models/Negociacao';\n\nexport class NegociacaoDao{\n\n    constructor(connection){\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao){\n        return new Promise((resolve, reject) => {\n            let request = this._connection.transaction([this._store], 'readwrite')  //Obtem a transição\n                                .objectStore(this._store)                           //Recupera a store\n                                .add(negociacao);                                   //Adiciona o dado na Store\n\n            request.onsuccess = event => {\n                resolve();\n            };\n\n            request.onerror = event => {\n                console.log(event.target.error);\n                reject('Não foi possível adicionar a Negociação.');\n            };\n        });\n    }\n\n    listaTodos(){\n        return new Promise((resolve, reject) => {\n            let cursor = this._connection\n                            .transaction([this._store], 'readwrite')    //Obtendo a Transação\n                            .objectStore(this._store)                   //Obtendo a Store\n                            .openCursor();                              //Obtendo o Cursor, que irá varrer a Object Store\n\n            let negociacoes = [];\n\n            cursor.onsuccess = event => {\n                let atual = event.target.result;\n\n                if(atual){\n                    let dado = atual.value;\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n                    atual.continue();\n                }else\n                    resolve(negociacoes);\n            };\n\n            cursor.onerror = event => {\n                console.log(event.target.error.name);\n                reject('Não foi possível listar as Negociações.');\n            };\n        });\n    }\n\n    apagaTodos(){\n        return new Promise((resolve, reject) => {\n            \n            let request = this._connection\n                            .transaction([this._store], 'readwrite')    //Obtendo a Transação\n                            .objectStore(this._store)                   //Obtendo a Store\n                            .clear();                                   //Apagando os dados da Object Store\n\n            request.onsuccess = event => resolve('Negociações removidas com sucesso.');\n\n            request.onerror = event => {\n                console.log(event.target.error);\n                reject('Não foi possível apagar as Negociações.');\n            };\n        });\n    }\n}"]}
{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","event","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAuB;AAAA;;AACnB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAW;AAAA;;AAChB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,UAAU,MAAKN,WAAL,CAAiBO,WAAjB,CAA6B,CAAC,MAAKN,MAAN,CAA7B,EAA4C,WAA5C,EAA0D;AAA1D,iBACOO,WADP,CACmB,MAAKP,MADxB,EAC0D;AAD1D,iBAEOQ,GAFP,CAEWP,UAFX,CAAd,CADoC,CAGoC;;AAExEI,wBAAQI,SAAR,GAAoB,iBAAS;AACzBN;AACH,iBAFD;;AAIAE,wBAAQK,OAAR,GAAkB,iBAAS;AACvBC,4BAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAzB;AACAX,2BAAO,0CAAP;AACH,iBAHD;AAIH,aAbM,CAAP;AAcH;;;qCAEW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIY,SAAS,OAAKjB,WAAL,CACIO,WADJ,CACgB,CAAC,OAAKN,MAAN,CADhB,EAC+B,WAD/B,EAC+C;AAD/C,iBAEIO,WAFJ,CAEgB,OAAKP,MAFrB,EAE+C;AAF/C,iBAGIiB,UAHJ,EAAb,CADoC,CAIwB;;AAE5D,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOP,SAAP,GAAmB,iBAAS;AACxB,wBAAIU,QAAQN,MAAMC,MAAN,CAAaM,MAAzB;;AAEA,wBAAGD,KAAH,EAAS;AACL,4BAAIE,OAAOF,MAAMG,KAAjB;AACAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACAR,8BAAMS,QAAN;AACH,qBAJD,MAKIzB,QAAQe,WAAR;AACP,iBATD;;AAWAF,uBAAON,OAAP,GAAiB,iBAAS;AACtBC,4BAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAb,CAAmBc,IAA/B;AACAzB,2BAAO,yCAAP;AACH,iBAHD;AAIH,aAvBM,CAAP;AAwBH;;;qCAEW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,OAAKN,WAAL,CACGO,WADH,CACe,CAAC,OAAKN,MAAN,CADf,EAC8B,WAD9B,EAC8C;AAD9C,iBAEGO,WAFH,CAEe,OAAKP,MAFpB,EAE8C;AAF9C,iBAGG8B,KAHH,EAAd,CAFoC,CAKwB;;AAE5DzB,wBAAQI,SAAR,GAAoB;AAAA,2BAASN,QAAQ,oCAAR,CAAT;AAAA,iBAApB;;AAEAE,wBAAQK,OAAR,GAAkB,iBAAS;AACvBC,4BAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAzB;AACAX,2BAAO,yCAAP;AACH,iBAHD;AAIH,aAbM,CAAP;AAcH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao{\r\n\r\n    constructor(connection){\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao){\r\n        return new Promise((resolve, reject) => {\r\n            let request = this._connection.transaction([this._store], 'readwrite')  //Obtem a transição\r\n                                .objectStore(this._store)                           //Recupera a store\r\n                                .add(negociacao);                                   //Adiciona o dado na Store\r\n\r\n            request.onsuccess = event => {\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = event => {\r\n                console.log(event.target.error);\r\n                reject('Não foi possível adicionar a Negociação.');\r\n            };\r\n        });\r\n    }\r\n\r\n    listaTodos(){\r\n        return new Promise((resolve, reject) => {\r\n            let cursor = this._connection\r\n                            .transaction([this._store], 'readwrite')    //Obtendo a Transação\r\n                            .objectStore(this._store)                   //Obtendo a Store\r\n                            .openCursor();                              //Obtendo o Cursor, que irá varrer a Object Store\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = event => {\r\n                let atual = event.target.result;\r\n\r\n                if(atual){\r\n                    let dado = atual.value;\r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n                    atual.continue();\r\n                }else\r\n                    resolve(negociacoes);\r\n            };\r\n\r\n            cursor.onerror = event => {\r\n                console.log(event.target.error.name);\r\n                reject('Não foi possível listar as Negociações.');\r\n            };\r\n        });\r\n    }\r\n\r\n    apagaTodos(){\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            let request = this._connection\r\n                            .transaction([this._store], 'readwrite')    //Obtendo a Transação\r\n                            .objectStore(this._store)                   //Obtendo a Store\r\n                            .clear();                                   //Apagando os dados da Object Store\r\n\r\n            request.onsuccess = event => resolve('Negociações removidas com sucesso.');\r\n\r\n            request.onerror = event => {\r\n                console.log(event.target.error);\r\n                reject('Não foi possível apagar as Negociações.');\r\n            };\r\n        });\r\n    }\r\n}"]}